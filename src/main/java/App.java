import java.util.HashMap;
import java.util.List;
import java.util.Map;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    private ItemRepository itemRepository;
    private SalesPromotionRepository salesPromotionRepository;

    public App(ItemRepository itemRepository, SalesPromotionRepository salesPromotionRepository) {
        this.itemRepository = itemRepository;
        this.salesPromotionRepository = salesPromotionRepository;
    }

    public String bestCharge(List<String> inputs) {
        //TODO: write code here
        StringBuilder sb = new StringBuilder("============= Order details =============\n");
        List<Item> itemsRe = itemRepository.findAll();
        List<SalesPromotion> salesPromotionsRe = salesPromotionRepository.findAll();
        List<String> type2Ids = salesPromotionsRe.get(1).getRelatedItems();

        Map<Item, Integer> items = new HashMap<>();

        for (String input : inputs) {
            String[] split = input.split(" x ");
            for (Item item : itemsRe) {
                if (item.getId().equals(split[0])) {
                    sb.append(item.getName() + " x " + split[1] + " = " +
                            (int) item.getPrice() * Integer.valueOf(split[1]) + " yuan\n");
                    items.put(item, Integer.valueOf(split[1]));
                    break;
                }
            }
        }

        double totalPrice = 0;
        double type1Price = 0;
        double type2Price = 0;
        double saving = 0;
        for (Map.Entry<Item, Integer> item : items.entrySet()) {
            Item good = item.getKey();
            Integer amount = item.getValue();
            totalPrice += good.getPrice() * amount;
            if (type2Ids.contains(good.getId())) {
                type2Price += (good.getPrice() / 2) * amount;
            } else {
                type2Price += good.getPrice() * amount;
            }
        }
        if (totalPrice >= 30) {
            type1Price = totalPrice - 6;
        } else {
            type1Price = totalPrice;
        }

        sb.append("-----------------------------------\n");
        if (totalPrice <= type1Price && totalPrice <= type2Price) {

            sb.append("Total：" + (int) totalPrice + " yuan\n");
        } else {
            sb.append("Promotion used:\n");
            if (type1Price <= type2Price) {
                saving = totalPrice - type1Price;
                sb.append("满30减6 yuan，saving " + (int) saving + " yuan\n");
                sb.append("-----------------------------------\n");
                sb.append("Total：" + (int) type1Price + " yuan\n");
            } else {
                saving = totalPrice - type2Price;
                sb.append("Half price for certain dishes (Braised chicken，Cold noodles)，saving "
                        + (int) saving + " yuan\n");
                sb.append("-----------------------------------\n");
                sb.append("Total：" + (int) type2Price + " yuan\n");
            }
        }

        sb.append("===================================");
        return sb.toString();
    }

}
